// <auto-generated />
using System;
using EducationalCenter.DataAccess.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EducationalCenter.Data.Migrations
{
    [DbContext(typeof(EducationalCenterContext))]
    [Migration("20210923192700_IdentityServer")]
    partial class IdentityServer
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EducationalCenter.Common.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("EducationalCenter.Common.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ControlForm")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HoursCount")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ControlForm = 1,
                            Description = "The mathematical study of continuous change",
                            HoursCount = 150,
                            Title = "Calculus"
                        },
                        new
                        {
                            Id = 2,
                            ControlForm = 0,
                            Description = "The mathematical study of equations in which an unknown function appears under an integral sign",
                            HoursCount = 100,
                            Title = "Integral equations"
                        },
                        new
                        {
                            Id = 3,
                            ControlForm = 1,
                            Description = "The branch of mathematics concerning linear equations",
                            HoursCount = 200,
                            Title = "Linear algebra"
                        },
                        new
                        {
                            Id = 4,
                            ControlForm = 0,
                            Description = "The study about the history of Belarus in 20th century",
                            HoursCount = 100,
                            Title = "The history of Belarus"
                        },
                        new
                        {
                            Id = 5,
                            ControlForm = 0,
                            Description = "The study about basics of the philosophy",
                            HoursCount = 100,
                            Title = "Philosophy"
                        },
                        new
                        {
                            Id = 6,
                            ControlForm = 1,
                            Description = "English lessons",
                            HoursCount = 400,
                            Title = "English"
                        },
                        new
                        {
                            Id = 7,
                            ControlForm = 1,
                            Description = "The branch of mathematics concerning with properties of space that are related with distance, shape, size, and relative position of figures.",
                            HoursCount = 200,
                            Title = "Geometry"
                        },
                        new
                        {
                            Id = 8,
                            ControlForm = 1,
                            Description = "The study of mathematical structures that are fundamentally discrete rather than continuous.",
                            HoursCount = 250,
                            Title = "Discrete Mathematics"
                        },
                        new
                        {
                            Id = 9,
                            ControlForm = 1,
                            Description = "The study of logic within mathematics",
                            HoursCount = 200,
                            Title = "Mathematical Logic"
                        },
                        new
                        {
                            Id = 10,
                            ControlForm = 0,
                            Description = "The branch of mathematics dealing with the general properties of algorithms",
                            HoursCount = 100,
                            Title = "Theory Of Algorithms"
                        },
                        new
                        {
                            Id = 11,
                            ControlForm = 1,
                            Description = "The branch of mathematics concerned with probability.",
                            HoursCount = 240,
                            Title = "Probability theory"
                        },
                        new
                        {
                            Id = 12,
                            ControlForm = 0,
                            Description = "The application of probability theory, a branch of mathematics, to statistics, as opposed to techniques for collecting statistical data.",
                            HoursCount = 150,
                            Title = "Mathematical statistics"
                        },
                        new
                        {
                            Id = 13,
                            ControlForm = 1,
                            Description = "The natural science that studies matter, its motion and behavior through space and time, and the related entities of energy and force.",
                            HoursCount = 300,
                            Title = "Physics"
                        });
                });

            modelBuilder.Entity("EducationalCenter.Common.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FacultyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "English"
                        },
                        new
                        {
                            Id = 2,
                            FacultyId = 1,
                            Name = "Higher Algebra"
                        },
                        new
                        {
                            Id = 3,
                            FacultyId = 1,
                            Name = "Mathematical Analysis"
                        },
                        new
                        {
                            Id = 4,
                            FacultyId = 1,
                            Name = "Geometry and Topology"
                        },
                        new
                        {
                            Id = 5,
                            FacultyId = 1,
                            Name = "Computational Mathematics"
                        },
                        new
                        {
                            Id = 6,
                            FacultyId = 1,
                            Name = "Discrete Mathematics"
                        },
                        new
                        {
                            Id = 7,
                            FacultyId = 1,
                            Name = "Differential Geometry and Its Applications"
                        },
                        new
                        {
                            Id = 8,
                            FacultyId = 1,
                            Name = "Differential Equations"
                        },
                        new
                        {
                            Id = 9,
                            FacultyId = 1,
                            Name = "Mathematical Logic and Theory of Algorithms"
                        },
                        new
                        {
                            Id = 10,
                            FacultyId = 1,
                            Name = "General topology and geometry"
                        },
                        new
                        {
                            Id = 11,
                            FacultyId = 1,
                            Name = "General management challenges"
                        },
                        new
                        {
                            Id = 12,
                            FacultyId = 1,
                            Name = "Theoretical informatics"
                        },
                        new
                        {
                            Id = 13,
                            FacultyId = 1,
                            Name = "Probability Theory"
                        },
                        new
                        {
                            Id = 14,
                            FacultyId = 1,
                            Name = "Theory of Dynamical Systems"
                        },
                        new
                        {
                            Id = 15,
                            FacultyId = 1,
                            Name = "Number theory"
                        },
                        new
                        {
                            Id = 16,
                            FacultyId = 1,
                            Name = "Mathematical Statistics and Stochastic Processes"
                        },
                        new
                        {
                            Id = 17,
                            FacultyId = 1,
                            Name = "Theory of Functions and Functional Analysis"
                        });
                });

            modelBuilder.Entity("EducationalCenter.Common.Models.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Faculties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Mechanics and Mathematics"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Computational Mathematics and Cybernetics"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Physics"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Chemistry"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Materials Science"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Biology"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Bioengineering and Bioinformatics"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Soil Science"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Geology"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Geography"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Fundamental Medicine"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Biotechnology"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Space Research"
                        },
                        new
                        {
                            Id = 14,
                            Name = "History"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Philology"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Philosophy"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Economics"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Law"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Journalism"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Psychology"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Sociology"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Foreign Languages ​​and Regional Studies"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Public Administration"
                        },
                        new
                        {
                            Id = 24,
                            Name = "World Politics"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Arts"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Global Processes"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Pedagogical Education"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Political Science"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Business"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Television"
                        });
                });

            modelBuilder.Entity("EducationalCenter.Common.Models.Lecture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuditoriumNumber")
                        .HasColumnType("int");

                    b.Property<string>("BuildingName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StudentGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentGroupId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Lectures");
                });

            modelBuilder.Entity("EducationalCenter.Common.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("EMail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(2003, 5, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EMail = "masha4221@ya.ru",
                            FirstName = "Mariya",
                            GroupId = 1,
                            LastName = "Akimova",
                            PhoneNumber = "80299383772"
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTime(2002, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EMail = "maxim.alekseev2002@gmail.com",
                            FirstName = "Maxim",
                            GroupId = 1,
                            LastName = "Alekseev",
                            PhoneNumber = "80292923022"
                        },
                        new
                        {
                            Id = 3,
                            DateOfBirth = new DateTime(2002, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EMail = "aleksey.alekseev2002@gmail.com",
                            FirstName = "Aleksey",
                            GroupId = 1,
                            LastName = "Alekseev",
                            PhoneNumber = "80290876946"
                        },
                        new
                        {
                            Id = 4,
                            DateOfBirth = new DateTime(2001, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EMail = "viktor.arhipov@gmail.com",
                            FirstName = "Viktor",
                            GroupId = 1,
                            LastName = "Arhipov",
                            PhoneNumber = "80290881237"
                        },
                        new
                        {
                            Id = 5,
                            DateOfBirth = new DateTime(2002, 2, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EMail = "viktor.baranov@gmail.com",
                            FirstName = "Viktor",
                            GroupId = 1,
                            LastName = "Baranov",
                            PhoneNumber = "80297555386"
                        },
                        new
                        {
                            Id = 6,
                            DateOfBirth = new DateTime(2001, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EMail = "vasili.belousov@gmail.com",
                            FirstName = "Vasili",
                            GroupId = 1,
                            LastName = "Belousov",
                            PhoneNumber = "80298898114"
                        },
                        new
                        {
                            Id = 7,
                            DateOfBirth = new DateTime(2001, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EMail = "sofiya.belousova@gmail.com",
                            FirstName = "Sofiya",
                            GroupId = 1,
                            LastName = "Belousova",
                            PhoneNumber = "80290179645"
                        },
                        new
                        {
                            Id = 8,
                            DateOfBirth = new DateTime(2002, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EMail = "mikhail.borisov@mail.ru",
                            FirstName = "Mikhail",
                            GroupId = 1,
                            LastName = "Borisov",
                            PhoneNumber = "80292485857"
                        },
                        new
                        {
                            Id = 9,
                            DateOfBirth = new DateTime(2001, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EMail = "mark.vasiliev@mail.ru",
                            FirstName = "Mark",
                            GroupId = 1,
                            LastName = "Vasiliev",
                            PhoneNumber = "80291314170"
                        },
                        new
                        {
                            Id = 10,
                            DateOfBirth = new DateTime(2002, 11, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EMail = "valeriya.vasilieva@mail.ru",
                            FirstName = "Valeriya",
                            GroupId = 1,
                            LastName = "Vasilieva",
                            PhoneNumber = "80295986128"
                        },
                        new
                        {
                            Id = 11,
                            DateOfBirth = new DateTime(2003, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EMail = "valeriya.vasilieva@mail.ru",
                            FirstName = "Vitaliy",
                            GroupId = 1,
                            LastName = "Vinokurov",
                            PhoneNumber = "80292959451"
                        },
                        new
                        {
                            Id = 12,
                            DateOfBirth = new DateTime(2003, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EMail = "alexander.vlasov@gmail.com",
                            FirstName = "Alexander",
                            GroupId = 1,
                            LastName = "Vlasov",
                            PhoneNumber = "80297387311"
                        },
                        new
                        {
                            Id = 13,
                            DateOfBirth = new DateTime(2003, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EMail = "arina.volkova@gmail.com",
                            FirstName = "Arina",
                            GroupId = 1,
                            LastName = "Volkova",
                            PhoneNumber = "80295752575"
                        },
                        new
                        {
                            Id = 14,
                            DateOfBirth = new DateTime(2002, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EMail = "taisia.voloshina@gmail.com",
                            FirstName = "Taisia",
                            GroupId = 1,
                            LastName = "Voloshina",
                            PhoneNumber = "80295752575"
                        },
                        new
                        {
                            Id = 15,
                            DateOfBirth = new DateTime(2002, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EMail = "oleg.prokopovich@gmail.com",
                            FirstName = "Oleg",
                            GroupId = 1,
                            LastName = "Prokopovich",
                            PhoneNumber = "80293840939"
                        },
                        new
                        {
                            Id = 16,
                            DateOfBirth = new DateTime(2003, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EMail = "eva.galkina@gmail.com",
                            FirstName = "Eva",
                            GroupId = 1,
                            LastName = "Galkina",
                            PhoneNumber = "80292417030"
                        },
                        new
                        {
                            Id = 17,
                            DateOfBirth = new DateTime(2004, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EMail = "olga.gerasimova@gmail.com",
                            FirstName = "Olga",
                            GroupId = 1,
                            LastName = "Gerasimova",
                            PhoneNumber = "80296959163"
                        },
                        new
                        {
                            Id = 18,
                            DateOfBirth = new DateTime(2004, 2, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EMail = "vladimir.ivanov@gmail.com",
                            FirstName = "Vladimir",
                            GroupId = 1,
                            LastName = "Ivanov",
                            PhoneNumber = "80293899049"
                        },
                        new
                        {
                            Id = 19,
                            DateOfBirth = new DateTime(2003, 12, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EMail = "egor.kirillov@gmail.com",
                            FirstName = "Egor",
                            GroupId = 1,
                            LastName = "Kirillov",
                            PhoneNumber = "80293342034"
                        },
                        new
                        {
                            Id = 20,
                            DateOfBirth = new DateTime(2002, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EMail = "anna.kruglova@gmail.com",
                            FirstName = "Anna",
                            GroupId = 1,
                            LastName = "Kruglova",
                            PhoneNumber = "80298668976"
                        },
                        new
                        {
                            Id = 21,
                            DateOfBirth = new DateTime(2003, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EMail = "veronika.lebedeva@mail.ru",
                            FirstName = "Veronika",
                            GroupId = 1,
                            LastName = "Lebedeva",
                            PhoneNumber = "80297158895"
                        });
                });

            modelBuilder.Entity("EducationalCenter.Common.Models.StudentGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EndingYear")
                        .HasColumnType("int");

                    b.Property<int?>("FacultyId")
                        .HasColumnType("int");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("StudentGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndingYear = 2026,
                            FacultyId = 1,
                            StartYear = 2021,
                            Title = "21-1-1"
                        },
                        new
                        {
                            Id = 2,
                            EndingYear = 2026,
                            FacultyId = 2,
                            StartYear = 2021,
                            Title = "21-2-1"
                        },
                        new
                        {
                            Id = 3,
                            EndingYear = 2026,
                            FacultyId = 3,
                            StartYear = 2021,
                            Title = "21-3-1"
                        },
                        new
                        {
                            Id = 4,
                            EndingYear = 2026,
                            FacultyId = 4,
                            StartYear = 2021,
                            Title = "21-4-1"
                        },
                        new
                        {
                            Id = 5,
                            EndingYear = 2026,
                            FacultyId = 5,
                            StartYear = 2021,
                            Title = "21-5-1"
                        },
                        new
                        {
                            Id = 6,
                            EndingYear = 2026,
                            FacultyId = 6,
                            StartYear = 2021,
                            Title = "21-6-1"
                        },
                        new
                        {
                            Id = 7,
                            EndingYear = 2026,
                            FacultyId = 7,
                            StartYear = 2021,
                            Title = "21-7-1"
                        },
                        new
                        {
                            Id = 8,
                            EndingYear = 2026,
                            FacultyId = 8,
                            StartYear = 2021,
                            Title = "21-8-1"
                        },
                        new
                        {
                            Id = 9,
                            EndingYear = 2026,
                            FacultyId = 9,
                            StartYear = 2021,
                            Title = "21-9-1"
                        },
                        new
                        {
                            Id = 10,
                            EndingYear = 2026,
                            FacultyId = 10,
                            StartYear = 2021,
                            Title = "21-10-1"
                        },
                        new
                        {
                            Id = 11,
                            EndingYear = 2026,
                            FacultyId = 11,
                            StartYear = 2021,
                            Title = "21-11-1"
                        },
                        new
                        {
                            Id = 12,
                            EndingYear = 2026,
                            FacultyId = 12,
                            StartYear = 2021,
                            Title = "21-12-1"
                        },
                        new
                        {
                            Id = 13,
                            EndingYear = 2026,
                            FacultyId = 13,
                            StartYear = 2021,
                            Title = "21-13-1"
                        },
                        new
                        {
                            Id = 14,
                            EndingYear = 2026,
                            FacultyId = 14,
                            StartYear = 2021,
                            Title = "21-14-1"
                        },
                        new
                        {
                            Id = 15,
                            EndingYear = 2026,
                            FacultyId = 15,
                            StartYear = 2021,
                            Title = "21-15-1"
                        },
                        new
                        {
                            Id = 16,
                            EndingYear = 2026,
                            FacultyId = 16,
                            StartYear = 2021,
                            Title = "21-16-1"
                        },
                        new
                        {
                            Id = 17,
                            EndingYear = 2026,
                            FacultyId = 17,
                            StartYear = 2021,
                            Title = "21-17-1"
                        },
                        new
                        {
                            Id = 18,
                            EndingYear = 2026,
                            FacultyId = 18,
                            StartYear = 2021,
                            Title = "21-18-1"
                        },
                        new
                        {
                            Id = 19,
                            EndingYear = 2026,
                            FacultyId = 19,
                            StartYear = 2021,
                            Title = "21-19-1"
                        },
                        new
                        {
                            Id = 20,
                            EndingYear = 2026,
                            FacultyId = 20,
                            StartYear = 2021,
                            Title = "21-20-1"
                        },
                        new
                        {
                            Id = 21,
                            EndingYear = 2026,
                            FacultyId = 21,
                            StartYear = 2021,
                            Title = "21-21-1"
                        },
                        new
                        {
                            Id = 22,
                            EndingYear = 2026,
                            FacultyId = 22,
                            StartYear = 2021,
                            Title = "21-22-1"
                        },
                        new
                        {
                            Id = 23,
                            EndingYear = 2026,
                            FacultyId = 23,
                            StartYear = 2021,
                            Title = "21-23-1"
                        },
                        new
                        {
                            Id = 24,
                            EndingYear = 2026,
                            FacultyId = 24,
                            StartYear = 2021,
                            Title = "21-24-1"
                        },
                        new
                        {
                            Id = 25,
                            EndingYear = 2026,
                            FacultyId = 25,
                            StartYear = 2021,
                            Title = "21-25-1"
                        },
                        new
                        {
                            Id = 26,
                            EndingYear = 2026,
                            FacultyId = 26,
                            StartYear = 2021,
                            Title = "21-26-1"
                        },
                        new
                        {
                            Id = 27,
                            EndingYear = 2026,
                            FacultyId = 27,
                            StartYear = 2021,
                            Title = "21-27-1"
                        },
                        new
                        {
                            Id = 28,
                            EndingYear = 2026,
                            FacultyId = 28,
                            StartYear = 2021,
                            Title = "21-28-1"
                        },
                        new
                        {
                            Id = 29,
                            EndingYear = 2026,
                            FacultyId = 29,
                            StartYear = 2021,
                            Title = "21-29-1"
                        },
                        new
                        {
                            Id = 30,
                            EndingYear = 2026,
                            FacultyId = 30,
                            StartYear = 2021,
                            Title = "21-30-1"
                        });
                });

            modelBuilder.Entity("EducationalCenter.Common.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("EMail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Formation")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = 1,
                            DateOfBirth = new DateTime(1983, 6, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 1,
                            EMail = "aleksey.suhorukov@gmail.com",
                            Experience = 4,
                            FirstName = "Aleksey",
                            Formation = 1,
                            LastName = "Suhorukov",
                            PhoneNumber = "80291700544",
                            Salary = 1500
                        },
                        new
                        {
                            Id = 2,
                            Category = 3,
                            DateOfBirth = new DateTime(1908, 11, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 2,
                            EMail = "viktor.vagner@gmail.com",
                            Experience = 15,
                            FirstName = "Viktor",
                            Formation = 3,
                            LastName = "Vagner",
                            PhoneNumber = "80338690014",
                            Salary = 3500
                        },
                        new
                        {
                            Id = 3,
                            Category = 3,
                            DateOfBirth = new DateTime(1845, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 3,
                            EMail = "georg.cantor@gmail.com",
                            Experience = 10,
                            FirstName = "Georg",
                            Formation = 3,
                            LastName = "Cantor",
                            PhoneNumber = "80258438118",
                            Salary = 5000
                        },
                        new
                        {
                            Id = 4,
                            Category = 3,
                            DateOfBirth = new DateTime(1792, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 4,
                            EMail = "nikolay.lobachevskiy@gmail.com",
                            Experience = 13,
                            FirstName = "Nikolay",
                            Formation = 2,
                            LastName = "Lobachevskiy",
                            PhoneNumber = "80297304512",
                            Salary = 4360
                        },
                        new
                        {
                            Id = 5,
                            Category = 3,
                            DateOfBirth = new DateTime(1967, 3, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 5,
                            EMail = "yuriy.vasilevskiy@gmail.com",
                            Experience = 14,
                            FirstName = "Yuriy",
                            Formation = 3,
                            LastName = "Vasilevskiy",
                            PhoneNumber = "80335936308",
                            Salary = 5690
                        },
                        new
                        {
                            Id = 6,
                            Category = 3,
                            DateOfBirth = new DateTime(1924, 12, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 6,
                            EMail = "sergey.yablonskiy@gmail.com",
                            Experience = 21,
                            FirstName = "Sergey",
                            Formation = 3,
                            LastName = "Yablonskiy",
                            PhoneNumber = "80298602366",
                            Salary = 8200
                        },
                        new
                        {
                            Id = 7,
                            Category = 2,
                            DateOfBirth = new DateTime(1976, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 7,
                            EMail = "anatoliy.fomenko@gmail.com",
                            Experience = 6,
                            FirstName = "Anatoliy",
                            Formation = 1,
                            LastName = "Fomenko",
                            PhoneNumber = "80298989783",
                            Salary = 3500
                        },
                        new
                        {
                            Id = 8,
                            Category = 2,
                            DateOfBirth = new DateTime(1988, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 8,
                            EMail = "katenka489@mail.ru",
                            Experience = 5,
                            FirstName = "Katerina",
                            Formation = 1,
                            LastName = "Lyutova",
                            PhoneNumber = "80294041777",
                            Salary = 2700
                        },
                        new
                        {
                            Id = 9,
                            Category = 3,
                            DateOfBirth = new DateTime(1961, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 9,
                            EMail = "varvara1961@ya.ru",
                            Experience = 25,
                            FirstName = "Varvara",
                            Formation = 2,
                            LastName = "Pivovarova",
                            PhoneNumber = "80297213791",
                            Salary = 7500
                        },
                        new
                        {
                            Id = 10,
                            Category = 2,
                            DateOfBirth = new DateTime(1975, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 10,
                            EMail = "anton1314@mail.ru",
                            Experience = 12,
                            FirstName = "Anton",
                            Formation = 1,
                            LastName = "Mazaev",
                            PhoneNumber = "80294097837",
                            Salary = 5100
                        },
                        new
                        {
                            Id = 11,
                            Category = 2,
                            DateOfBirth = new DateTime(1970, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 11,
                            EMail = "anton14091970@gmail.com",
                            Experience = 15,
                            FirstName = "Anton",
                            Formation = 1,
                            LastName = "Kasatkin",
                            PhoneNumber = "80292323673",
                            Salary = 5300
                        },
                        new
                        {
                            Id = 12,
                            Category = 0,
                            DateOfBirth = new DateTime(1997, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 12,
                            EMail = "lyudmila.yudashkina@yandex.ru",
                            Experience = 1,
                            FirstName = "Lyudmila",
                            Formation = 0,
                            LastName = "Yudashkina",
                            PhoneNumber = "80292512777",
                            Salary = 1800
                        },
                        new
                        {
                            Id = 13,
                            Category = 2,
                            DateOfBirth = new DateTime(1963, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 13,
                            EMail = "valentin2091@mail.ru",
                            Experience = 23,
                            FirstName = "Valentin",
                            Formation = 1,
                            LastName = "Yurlov",
                            PhoneNumber = "80291439863",
                            Salary = 1800
                        },
                        new
                        {
                            Id = 14,
                            Category = 0,
                            DateOfBirth = new DateTime(1996, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 14,
                            EMail = "nikolay16071996@mail.ru",
                            Experience = 1,
                            FirstName = "Nikolay",
                            Formation = 1,
                            LastName = "Kuraev",
                            PhoneNumber = "80299709082",
                            Salary = 1950
                        },
                        new
                        {
                            Id = 15,
                            Category = 1,
                            DateOfBirth = new DateTime(1984, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 15,
                            EMail = "fedot.parshikov@ya.ru",
                            Experience = 4,
                            FirstName = "Fedot",
                            Formation = 1,
                            LastName = "Pershikov",
                            PhoneNumber = "80298608842",
                            Salary = 2300
                        },
                        new
                        {
                            Id = 16,
                            Category = 1,
                            DateOfBirth = new DateTime(1984, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 16,
                            EMail = "fedot.parshikov@ya.ru",
                            Experience = 4,
                            FirstName = "Fedot",
                            Formation = 1,
                            LastName = "Pershikov",
                            PhoneNumber = "80298608842",
                            Salary = 2300
                        },
                        new
                        {
                            Id = 17,
                            Category = 1,
                            DateOfBirth = new DateTime(1984, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 17,
                            EMail = "fedot.parshikov@ya.ru",
                            Experience = 4,
                            FirstName = "Fedot",
                            Formation = 1,
                            LastName = "Pershikov",
                            PhoneNumber = "80298608842",
                            Salary = 2300
                        });
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EducationalCenter.Common.Models.Department", b =>
                {
                    b.HasOne("EducationalCenter.Common.Models.Faculty", "Faculty")
                        .WithMany("Departments")
                        .HasForeignKey("FacultyId");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("EducationalCenter.Common.Models.Lecture", b =>
                {
                    b.HasOne("EducationalCenter.Common.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("EducationalCenter.Common.Models.StudentGroup", "StudentGroup")
                        .WithMany()
                        .HasForeignKey("StudentGroupId");

                    b.HasOne("EducationalCenter.Common.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");

                    b.Navigation("Course");

                    b.Navigation("StudentGroup");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("EducationalCenter.Common.Models.Student", b =>
                {
                    b.HasOne("EducationalCenter.Common.Models.StudentGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("EducationalCenter.Common.Models.StudentGroup", b =>
                {
                    b.HasOne("EducationalCenter.Common.Models.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("EducationalCenter.Common.Models.Teacher", b =>
                {
                    b.HasOne("EducationalCenter.Common.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EducationalCenter.Common.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EducationalCenter.Common.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationalCenter.Common.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EducationalCenter.Common.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationalCenter.Common.Models.Faculty", b =>
                {
                    b.Navigation("Departments");
                });
#pragma warning restore 612, 618
        }
    }
}
